# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PIL import Image, ImageFilter
from PIL.ImageQt import ImageQt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1070, 577)
        #
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # blur button properties
        self.blur = QtWidgets.QPushButton(self.centralwidget)
        self.blur.setGeometry(QtCore.QRect(10, 10, 211, 28))
        self.blur.setObjectName("blur")
        # sepia button properties
        self.sepia = QtWidgets.QPushButton(self.centralwidget)
        self.sepia.setGeometry(QtCore.QRect(10, 50, 211, 28))
        self.sepia.setObjectName("sepia")
        # gray scale button properties
        self.gray = QtWidgets.QPushButton(self.centralwidget)
        self.gray.setGeometry(QtCore.QRect(10, 90, 211, 28))
        self.gray.setObjectName("gray")
        # sharpen button properties
        self.sharpen = QtWidgets.QPushButton(self.centralwidget)
        self.sharpen.setGeometry(QtCore.QRect(10, 130, 211, 28))
        self.sharpen.setObjectName("sharpen")
        # unsharpen button properties
        self.unsharpen = QtWidgets.QPushButton(self.centralwidget)
        self.unsharpen.setGeometry(QtCore.QRect(10, 170, 211, 28))
        self.unsharpen.setObjectName("unsharpen")
        # smooth button properties
        self.smooth = QtWidgets.QPushButton(self.centralwidget)
        self.smooth.setGeometry(QtCore.QRect(10, 210, 211, 28))
        self.smooth.setObjectName("smooth")
        # median button properties
        self.median = QtWidgets.QPushButton(self.centralwidget)
        self.median.setGeometry(QtCore.QRect(10, 250, 211, 28))
        self.median.setObjectName("media")
        # emboss button properties
        self.emboss = QtWidgets.QPushButton(self.centralwidget)
        self.emboss.setGeometry(QtCore.QRect(10, 290, 211, 28))
        self.emboss.setObjectName("emboss")
        # contour button properties
        self.contour = QtWidgets.QPushButton(self.centralwidget)
        self.contour.setGeometry(QtCore.QRect(10, 330, 211, 28))
        self.contour.setObjectName("contour")
        # find edge button properties
        self.find_egde = QtWidgets.QPushButton(self.centralwidget)
        self.find_egde.setGeometry(QtCore.QRect(10, 370, 211, 28))
        self.find_egde.setObjectName("find_egde")
        # enhance edge button properties
        self.enhance_edge = QtWidgets.QPushButton(self.centralwidget)
        self.enhance_edge.setGeometry(QtCore.QRect(10, 410, 211, 28))
        self.enhance_edge.setObjectName("enhance_edge")
        # histogram button properties
        self.histogram = QtWidgets.QPushButton(self.centralwidget)
        self.histogram.setGeometry(QtCore.QRect(10, 530, 211, 28))
        self.histogram.setObjectName("histogram")
        # normalization button properties
        self.normalization = QtWidgets.QPushButton(self.centralwidget)
        self.normalization.setGeometry(QtCore.QRect(10, 490, 211, 28))
        self.normalization.setObjectName("normalization")
        # crop scale button properties
        self.crop = QtWidgets.QPushButton(self.centralwidget)
        self.crop.setGeometry(QtCore.QRect(10, 450, 211, 28))
        self.crop.setObjectName("crop")
        # image lable properties
        self.image = QtWidgets.QLabel(self.centralwidget)
        self.image.setGeometry(QtCore.QRect(240, 10, 821, 541))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.image.setFont(font)
        self.image.setText("")
        self.image.setPixmap(QtGui.QPixmap("duck.jpg"))
        self.image.setScaledContents(True)
        self.image.setObjectName("image")
        #
        MainWindow.setCentralWidget(self.centralwidget)
        #menu bar properties
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1070, 26))
        self.menubar.setObjectName("menubar")
        # file menu properties
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        # help menu properties
        self.menuhelp = QtWidgets.QMenu(self.menubar)
        self.menuhelp.setObjectName("menuhelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # setting actions for open butyon
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        # setting actions for save button
        self.actionsave = QtWidgets.QAction(MainWindow)
        self.actionsave.setObjectName("actionsave")
        # setting actions for credit button
        self.actioncredits = QtWidgets.QAction(MainWindow)
        self.actioncredits.setObjectName("actioncredits")
        # attaching them to menu bar
        self.menufile.addAction(self.actionopen)
        self.menufile.addAction(self.actionsave)
        self.menuhelp.addAction(self.actioncredits)
        self.menubar.addAction(self.menufile.menuAction())
        self.menubar.addAction(self.menuhelp.menuAction())
        #
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # connecting button with functions
        self.gray.clicked.connect(self.gray_scale)
        self.blur.clicked.connect(self.blured)
        self.sharpen.clicked.connect(self.sharpen_mask)
        self.unsharpen.clicked.connect(self.unsharpen_mask)
        self.smooth.clicked.connect(self.smoothen)
        self.median.clicked.connect(self.median_filter)
        self.emboss.clicked.connect(self.emboss_filter)
        self.find_egde.clicked.connect(self.finding_edges)
        self.enhance_edge.clicked.connect(self.edge_enhancement)
        self.contour.clicked.connect(self.contour_filter)

        # set texts in each object
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.blur.setText(_translate("MainWindow", "blur"))
        self.sepia.setText(_translate("MainWindow", "sepia"))
        self.gray.setText(_translate("MainWindow", "gray scale"))
        self.sharpen.setText(_translate("MainWindow", "sharpen"))
        self.unsharpen.setText(_translate("MainWindow", "unsharpen"))
        self.smooth.setText(_translate("MainWindow", "smooth"))
        self.median.setText(_translate("MainWindow", "median"))
        self.emboss.setText(_translate("MainWindow", "emboss"))
        self.contour.setText(_translate("MainWindow", "contour"))
        self.find_egde.setText(_translate("MainWindow", "find edegs"))
        self.enhance_edge.setText(_translate("MainWindow", "enhance edges"))
        self.histogram.setText(_translate("MainWindow", "color histogram"))
        self.normalization.setText(_translate("MainWindow", "image normalization"))
        self.crop.setText(_translate("MainWindow", "crop"))
        self.menufile.setTitle(_translate("MainWindow", "file"))
        self.menuhelp.setTitle(_translate("MainWindow", "help"))
        self.actionopen.setText(_translate("MainWindow", "open.."))
        self.actionopen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionsave.setText(_translate("MainWindow", "save"))
        self.actionsave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actioncredits.setText(_translate("MainWindow", "credits"))

    def gray_scale(self):
        # open image and convert its mode to L for gray scale
        image = Image.open("duck.jpg")
        image = image.convert("L")
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def blured(self):
        #open image and imply blur filter to image
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.BLUR)
        # passing image from piloow to pyqt
        im = ImageQt(image
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def sharpen_mask(self):
        # open image and imply sharpen filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.SHARPEN)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def unsharpen_mask(self):
        # open image and imply unsharpen filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.UnsharpMask)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def smoothen(self):
        #open image and imply smooth filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.SMOOTH)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def median_filter(self):
        #open image and imply medai filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.MedianFilter)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def emboss_filter(self):
        #open image and imply emboss filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.EMBOSS)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def finding_edges(self):
        # open image and imply find egde filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.FIND_EDGES)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def edge_enhancement(self):
        # open image and imply edge enhance filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.EDGE_ENHANCE)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)

    def contour_filter(self):
        # open image and imply contour filter
        image = Image.open("duck.jpg")
        image = image.filter(ImageFilter.CONTOUR)
        # passing image from piloow to pyqt
        im = ImageQt(image)
        # loading image in image lable
        pixmap = QtGui.QPixmap.fromImage(im)
        self.image.setPixmap(pixmap)





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
